// <auto-generated />
using System;
using EcomRevisited.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcomRevisited.Migrations
{
    [DbContext(typeof(EcomDbContext))]
    partial class EcomDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcomRevisited.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EcomRevisited.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("EcomRevisited.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ConversionRate")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TaxRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("686db6db-8243-4f35-9c07-030759ceb3d0"),
                            ConversionRate = 1.0,
                            Name = "Canada",
                            TaxRate = 0.070000000000000007
                        },
                        new
                        {
                            Id = new Guid("6b25c11a-dbe0-459e-82c4-0be6c4409096"),
                            ConversionRate = 1.1000000000000001,
                            Name = "United States",
                            TaxRate = 0.050000000000000003
                        },
                        new
                        {
                            Id = new Guid("2307fd24-788d-4446-92b6-3a7d78f793e1"),
                            ConversionRate = 1.3,
                            Name = "United Kingdom",
                            TaxRate = 0.10000000000000001
                        });
                });

            modelBuilder.Entity("EcomRevisited.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6321f82-56fe-4d08-9c75-c4fdc85ef7b8"),
                            AvailableQuantity = 10,
                            Description = "High performance laptop",
                            Name = "Laptop",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = new Guid("fe1df346-8748-4a62-8f81-050a22a3dc64"),
                            AvailableQuantity = 20,
                            Description = "Latest model",
                            Name = "Smartphone",
                            Price = 800.0
                        },
                        new
                        {
                            Id = new Guid("1bdf568a-3b1d-4acd-a162-10177dd8b912"),
                            AvailableQuantity = 30,
                            Description = "Wireless",
                            Name = "Headphones",
                            Price = 150.0
                        },
                        new
                        {
                            Id = new Guid("9c6c028f-862b-40b8-a135-9904d81db7e0"),
                            AvailableQuantity = 5,
                            Description = "Digital SLR",
                            Name = "Camera",
                            Price = 1200.0
                        },
                        new
                        {
                            Id = new Guid("9f417a57-ff91-4df1-abaf-58ab7f5a2cc3"),
                            AvailableQuantity = 15,
                            Description = "With fitness tracking",
                            Name = "Smartwatch",
                            Price = 250.0
                        });
                });

            modelBuilder.Entity("EcomRevisited.Models.CartItem", b =>
                {
                    b.HasOne("EcomRevisited.Models.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");
                });

            modelBuilder.Entity("EcomRevisited.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
