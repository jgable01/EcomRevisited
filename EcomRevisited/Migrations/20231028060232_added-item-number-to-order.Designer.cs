// <auto-generated />
using System;
using EcomRevisited.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcomRevisited.Migrations
{
    [DbContext(typeof(EcomDbContext))]
    [Migration("20231028060232_added-item-number-to-order")]
    partial class addeditemnumbertoorder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcomRevisited.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb10968d-ea5d-48f9-b90b-e88604149cb3")
                        },
                        new
                        {
                            Id = new Guid("53ad08b2-357d-4790-ab7f-369e74f565ba")
                        });
                });

            modelBuilder.Entity("EcomRevisited.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("EcomRevisited.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ConversionRate")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TaxRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c067ea9c-1b36-41a8-9d95-9ddb58b95a86"),
                            ConversionRate = 1.0,
                            Name = "Canada",
                            TaxRate = 0.070000000000000007
                        },
                        new
                        {
                            Id = new Guid("cd085ef6-c04e-4516-9016-8b76f8b8bc40"),
                            ConversionRate = 1.1000000000000001,
                            Name = "United States",
                            TaxRate = 0.050000000000000003
                        },
                        new
                        {
                            Id = new Guid("9f577222-d7a3-4fdf-b68e-70707930bdee"),
                            ConversionRate = 1.3,
                            Name = "United Kingdom",
                            TaxRate = 0.10000000000000001
                        });
                });

            modelBuilder.Entity("EcomRevisited.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfItems")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EcomRevisited.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("EcomRevisited.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("345e220e-60c0-45de-b65d-d1b1d61d31d8"),
                            AvailableQuantity = 10,
                            Description = "High performance laptop",
                            ImageUrl = "https://www.lifeofpix.com/wp-content/uploads/2018/05/p-244-ae-mint-005-1600x1169.jpg",
                            Name = "Laptop",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = new Guid("d06677ba-2450-497c-9a50-cd12e100f530"),
                            AvailableQuantity = 20,
                            Description = "Latest model",
                            ImageUrl = "https://media.istockphoto.com/id/1377877660/vector/realistic-mobile-phone-mockup-cellphone-app-template-isolated-stock-vector.jpg?s=612x612&w=0&k=20&c=Xw2padf6w33h9eQFFz83PL0reGEMdu1FtFsuI5G5Nf0=",
                            Name = "Smartphone",
                            Price = 800.0
                        },
                        new
                        {
                            Id = new Guid("b5ec9bea-29d0-43bd-9c2d-c50935b4e003"),
                            AvailableQuantity = 30,
                            Description = "Wireless",
                            ImageUrl = "https://images.pexels.com/photos/3945667/pexels-photo-3945667.jpeg?cs=srgb&dl=pexels-cottonbro-studio-3945667.jpg&fm=jpg",
                            Name = "Headphones",
                            Price = 150.0
                        },
                        new
                        {
                            Id = new Guid("a63eed52-2429-4221-8a2e-d37208df1e63"),
                            AvailableQuantity = 5,
                            Description = "Digital SLR",
                            ImageUrl = "https://images.pexels.com/photos/274973/pexels-photo-274973.jpeg?cs=srgb&dl=pexels-pixabay-274973.jpg&fm=jpg",
                            Name = "Camera",
                            Price = 1200.0
                        },
                        new
                        {
                            Id = new Guid("448a36f8-906a-470e-99d4-d1832a9b8741"),
                            AvailableQuantity = 15,
                            Description = "With fitness tracking",
                            ImageUrl = "https://images.pexels.com/photos/393047/pexels-photo-393047.jpeg?cs=srgb&dl=pexels-alexandr-borecky-393047.jpg&fm=jpg",
                            Name = "Smartwatch",
                            Price = 250.0
                        });
                });

            modelBuilder.Entity("EcomRevisited.Models.CartItem", b =>
                {
                    b.HasOne("EcomRevisited.Models.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("EcomRevisited.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcomRevisited.Models.OrderItem", b =>
                {
                    b.HasOne("EcomRevisited.Models.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("EcomRevisited.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("EcomRevisited.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
